generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  handle               String?     @unique
  bio                  String?
  image                String?
  email                String?     @unique
  emailVerified        DateTime?
  totalViews           Int         @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  isAdmin              Boolean     @default(false)
  links                Link[]
  templates            Template[]
  linksLocation        String?     @default("top")
  themePalette         Json?       @default("{\"name\": \"Light\", \"palette\": [\"#FFFFFF\", \"#F2F2F2\", \"#1F2937\", \"#6170F8\"]}")
  buttonStyle          String      @default("rounded-md")
  profileNameFontSize  Int         @default(16)
  bioFontSize          Int         @default(14)
  linkTitleFontSize    Int         @default(14)
  profileNameFontFamily String     @default("Inter")
  bioFontFamily        String     @default("Inter")
  linkTitleFontFamily  String     @default("Inter")
  profileImageSize     Int         @default(70)
  socialIconSize       Int         @default(20)
  faviconSize          Int         @default(32)
  headToPicturePadding Int         @default(40)
  pictureToNamePadding Int         @default(16)
  betweenCardsPadding  Int         @default(16)
  linkCardHeight       Int         @default(16)
  // Frame customization fields
  frameTemplate        String      @default("none")
  frameColor           String      @default("#000000")
  frameThickness       Int         @default(0)
  frameRotation        Int         @default(0)
  pictureRotation      Int         @default(0)
  syncRotation         Boolean     @default(true)
  frameAnimation       Json?       @default("{\"type\": null, \"enabled\": false, \"config\": {}}")
  backgroundImage      String?     // URL to the selected background image
  accounts             Account[]
  images               UserImage[]
  backgroundImages     BackgroundImage[]

  @@unique([handle, email])
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Link {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  url        String
  archived   Boolean   @default(false)
  order      Int
  isSocial   Boolean   @default(false)
  clicks     Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template? @relation(fields: [templateId], references: [id])
  templateId String?   @db.ObjectId

  // Iframely data
  type         String? // video, link, etc
  providerName String? // YouTube, Spotify, etc
  embedHtml    String? // The iframe HTML
  thumbnails   Json? // Array of thumbnail objects
  authorName   String? // Content author
  authorUrl    String? // Author profile URL
  iframelyMeta Json? // Additional metadata

  @@index([userId])
  @@index([templateId])
}

model UserImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  publicId   String   @unique // Cloudinary public ID
  url        String
  width      Int?
  height     Int?
  format     String?
  bytes      Int?
  isActive   Boolean  @default(true)
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(true)
  usageCount  Int      @default(0)
  rating      Float    @default(0)
  ratingCount Int      @default(0)
  thumbnailUrl String?

  // Template settings
  links                Link[]
  linksLocation        String? @default("top")
  themePalette         Json?   @default("{\"name\": \"Light\", \"palette\": [\"#FFFFFF\", \"#F2F2F2\", \"#1F2937\", \"#6170F8\"]}")
  buttonStyle          String  @default("rounded-md")
  profileNameFontSize  Int     @default(16)
  bioFontSize          Int     @default(14)
  linkTitleFontSize    Int     @default(14)
  profileNameFontFamily String  @default("Inter")
  bioFontFamily        String  @default("Inter")
  linkTitleFontFamily  String  @default("Inter")
  profileImageSize     Int     @default(70)
  socialIconSize       Int     @default(20)
  faviconSize          Int     @default(32)
  frameTemplate        String  @default("none")
  frameColor           String  @default("#000000")
  frameThickness       Int     @default(0)
  frameRotation        Int     @default(0)
  pictureRotation      Int     @default(0)
  syncRotation         Boolean @default(true)
  frameAnimation       Json?   @default("{\"type\": null, \"enabled\": false, \"config\": {}}")
  // Add missing padding and spacing fields
  headToPicturePadding Int     @default(40)
  pictureToNamePadding Int     @default(16)
  betweenCardsPadding  Int     @default(16)
  linkCardHeight       Int     @default(16)

  @@index([userId])
}

model BackgroundImage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(true)

  @@index([userId])
}
